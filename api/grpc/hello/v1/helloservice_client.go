// Copyright @2025-2028 <SieYuan> . All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file.

// Code generated by gofr.dev/cli/gofr. DO NOT EDIT.
package v1

import (
	"gofr.dev/pkg/gofr"
	"gofr.dev/pkg/gofr/metrics"
	"google.golang.org/grpc"
)

type HelloServiceGoFrClient interface {
	SayHello(*gofr.Context, *SayHelloRequest, ...grpc.CallOption) (*SayHelloResponse, error)
	HealthClient
}

type HelloServiceClientWrapper struct {
	client HelloServiceClient
	HealthClient
}

func NewHelloServiceGoFrClient(host string, metrics metrics.Manager) (HelloServiceGoFrClient, error) {
	conn, err := createGRPCConn(host, "HelloService")
	if err != nil {
		return &HelloServiceClientWrapper{
			client:       nil,
			HealthClient: &HealthClientWrapper{client: nil}, // Ensure HealthClient is also implemented
		}, err
	}

	metricsOnce.Do(func() {
		metrics.NewHistogram("app_gRPC-Client_stats", "Response time of gRPC client in milliseconds.", gRPCBuckets...)
	})

	res := NewHelloServiceClient(conn)
	healthClient := NewHealthClient(conn)

	return &HelloServiceClientWrapper{
		client: res,
		HealthClient: healthClient,
	}, nil
}
func (h *HelloServiceClientWrapper) SayHello(ctx *gofr.Context, req *SayHelloRequest, 
opts ...grpc.CallOption) (*SayHelloResponse, error) {
	result, err := invokeRPC(ctx, "/HelloService/SayHello", func() (interface{}, error) {
		return h.client.SayHello(ctx.Context, req, opts...)
	})

	if err != nil {
		return nil, err
	}
	return result.(*SayHelloResponse), nil
}
